🎯 Prompt Completo: Sistema de Cálculo Numérico com Frontend Feminino
Objetivo:
Crie um projeto completo com frontend (HTML/CSS/JS) e backend em Python, capaz de calcular raízes de funções reais utilizando os métodos de Falsa Posição e Newton-Raphson, com base nas fórmulas e regras matemáticas corretas de cada método.

🧠 Funcionalidades Back-End (Python):
Dois métodos de cálculo implementados:

Falsa Posição (Regula Falsi):

Fórmula:

𝑥
𝑟
=
𝑏
−
𝑓
(
𝑏
)
(
𝑎
−
𝑏
)
𝑓
(
𝑎
)
−
𝑓
(
𝑏
)
x 
r
​
 =b− 
f(a)−f(b)
f(b)(a−b)
​
 
Condições de parada: erro relativo <= ε ou número máximo de iterações.

Atualização dos limites com base no sinal de f(a) * f(xr).

Newton-Raphson:

Fórmula:

𝑥
𝑛
+
1
=
𝑥
𝑛
−
𝑓
(
𝑥
𝑛
)
𝑓
′
(
𝑥
𝑛
)
x 
n+1
​
 =x 
n
​
 − 
f 
′
 (x 
n
​
 )
f(x 
n
​
 )
​
 
Deve calcular a derivada analiticamente via SymPy.

Parar quando erro relativo <= ε ou limite de iteração for atingido.

Entrada via JSON (POST):

Função (em string, ex: "x**3 - x - 2")

Método a ser usado: "newton" ou "falsa_posicao"

Intervalo inicial (a, b) ou ponto inicial (x0)

Número máximo de iterações

Tolerância de erro ε

Saída (JSON):

Iterações com valores de x, f(x), erro absoluto, erro relativo

Raiz aproximada

Tempo de execução

Use as bibliotecas:

sympy para cálculo simbólico da derivada

numpy para avaliação da função

flask ou fastapi para a API

💅 Frontend (Feminino, Rosa, Bonito):
Design e estilo:

Tema rosa (gradientes suaves, rosa pastel, fontes arredondadas)

Responsivo para celular e desktop

Fonte: Poppins ou Nunito, tamanhos legíveis

HTML/CSS/JS:

Interface com campos:

Campo de entrada da função

Seleção do método (radio button estilizado)

Campos para: x0, a, b, ε, N

Botão "Calcular"

Mostrar resultado:

Tabela de iterações (x, f(x), erro)

Raiz final com destaque

Estilização com CSS customizado (sem Tailwind, mas elegante)

Interação com API Python:

Usar fetch() para enviar requisição para o backend

Mostrar os dados retornados de forma clara e animada

Exibir mensagens de erro caso a entrada seja inválida

💡 Extras e Diferenciais:
Adicione validações nos campos com mensagens amigáveis.

Use animações suaves com CSS (ex: fade-in para resultados).

Inclua uma explicação visual simplificada do método escolhido com um ícone ou infobox.

O botão pode ter efeito hover e clique animado, com um ícone feminino (ex: 💖 ou 🧠).

Use cores como #ffb6c1, #fce4ec, #f8bbd0, #ec407a, #f48fb1 para o tema rosa.

🚀 Tecnologias a usar:
Backend:

Python 3.10+

SymPy

NumPy

Flask ou FastAPI

Frontend:

HTML5 + CSS3 (tema rosa feminino)

JavaScript Vanilla (sem frameworks)

Fonte do Google Fonts

Ícones do Font Awesome (ou similar)